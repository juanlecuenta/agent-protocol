/*
 * Agent Protocol
 * Specification of the API protocol for communication with an agent.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package agentprotocol.micronaut.api;


import io.micronaut.http.annotation.*;
import agentprotocol.micronaut.invoker.annotation.HardNullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import agentprotocol.micronaut.model.Artifact;
import io.micronaut.http.multipart.CompletedFileUpload;
import io.micronaut.http.server.types.files.FileCustomizableResponseType;
import agentprotocol.micronaut.model.Step;
import agentprotocol.micronaut.model.StepRequestBody;
import agentprotocol.micronaut.model.Task;
import agentprotocol.micronaut.model.TaskArtifactsListResponse;
import agentprotocol.micronaut.model.TaskListResponse;
import agentprotocol.micronaut.model.TaskRequestBody;
import agentprotocol.micronaut.model.TaskStepsListResponse;
import jakarta.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value = "io.micronaut.openapi.generator.JavaMicronautServerCodegen")
@Controller
@Tag(name = "Agent", description = "The Agent API")
public interface AgentApi {

    /**
     * Creates a task for the agent.
     *
     * @param taskRequestBody  (optional)
     *
     * @return Task
     */
    @Operation(
        operationId = "createAgentTask",
        summary = "Creates a task for the agent.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A new agent task was successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "422", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskRequestBody")
        }
    )
    @Post("/ap/v1/agent/tasks")
    @Produces({"application/json"})
    @Consumes({"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    Task createAgentTask(
        @HardNullable
        @Valid
        @Body
        TaskRequestBody taskRequestBody
    );

    /**
     * Download a specified artifact.
     *
     * @param taskId ID of the task (required)
     *
     * @param artifactId ID of the artifact (required)
     *
     * @return FileCustomizableResponseType
     */
    @Operation(
        operationId = "downloadAgentTaskArtifact",
        summary = "Download a specified artifact.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned the content of the artifact.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = CompletedFileUpload.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = CompletedFileUpload.class))
            }),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskId", description = "ID of the task", required = true),
            @Parameter(name = "artifactId", description = "ID of the artifact", required = true)
        }
    )
    @Get("/ap/v1/agent/tasks/{task_id}/artifacts/{artifact_id}")
    @Produces({"application/octet-stream", "application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    FileCustomizableResponseType downloadAgentTaskArtifact(
        @NotNull
        @PathVariable("task_id")
        String taskId,
        @NotNull
        @PathVariable("artifact_id")
        String artifactId
    );

    /**
     * Execute a step in the specified agent task.
     *
     * @param taskId ID of the task (required)
     *
     * @param stepRequestBody  (optional)
     *
     * @return Step
     */
    @Operation(
        operationId = "executeAgentTaskStep",
        summary = "Execute a step in the specified agent task.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Executed step for the agent task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Step.class))
            }),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "422", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskId", description = "ID of the task", required = true),
            @Parameter(name = "stepRequestBody")
        }
    )
    @Post("/ap/v1/agent/tasks/{task_id}/steps")
    @Produces({"application/json"})
    @Consumes({"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    Step executeAgentTaskStep(
        @NotNull
        @PathVariable("task_id")
        String taskId,
        @HardNullable
        @Valid
        @Body
        StepRequestBody stepRequestBody
    );

    /**
     * Get details about a specified agent task.
     *
     * @param taskId ID of the task (required)
     *
     * @return Task
     */
    @Operation(
        operationId = "getAgentTask",
        summary = "Get details about a specified agent task.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned details about an agent task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskId", description = "ID of the task", required = true)
        }
    )
    @Get("/ap/v1/agent/tasks/{task_id}")
    @Produces({"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    Task getAgentTask(
        @NotNull
        @PathVariable("task_id")
        String taskId
    );

    /**
     * Get details about a specified task step.
     *
     * @param taskId ID of the task (required)
     *
     * @param stepId ID of the step (required)
     *
     * @return Step
     */
    @Operation(
        operationId = "getAgentTaskStep",
        summary = "Get details about a specified task step.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned details about an agent task step.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Step.class))
            }),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskId", description = "ID of the task", required = true),
            @Parameter(name = "stepId", description = "ID of the step", required = true)
        }
    )
    @Get("/ap/v1/agent/tasks/{task_id}/steps/{step_id}")
    @Produces({"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    Step getAgentTaskStep(
        @NotNull
        @PathVariable("task_id")
        String taskId,
        @NotNull
        @PathVariable("step_id")
        String stepId
    );

    /**
     * List all artifacts that have been created for the given task.
     *
     * @param taskId ID of the task (required)
     *
     * @param currentPage Page number (optional, default to 1)
     *
     * @param pageSize Number of items per page (optional, default to 10)
     *
     * @return TaskArtifactsListResponse
     */
    @Operation(
        operationId = "listAgentTaskArtifacts",
        summary = "List all artifacts that have been created for the given task.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned the list of artifacts for the task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskArtifactsListResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskId", description = "ID of the task", required = true),
            @Parameter(name = "currentPage", description = "Page number"),
            @Parameter(name = "pageSize", description = "Number of items per page")
        }
    )
    @Get("/ap/v1/agent/tasks/{task_id}/artifacts")
    @Produces({"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    TaskArtifactsListResponse listAgentTaskArtifacts(
        @NotNull
        @PathVariable("task_id")
        String taskId,
        @HardNullable
        @Min(1)
        @QueryValue(value = "current_page", defaultValue = "1")
        Integer currentPage,
        @HardNullable
        @Min(1)
        @QueryValue(value = "page_size", defaultValue = "10")
        Integer pageSize
    );

    /**
     * List all steps for the specified task.
     *
     * @param taskId ID of the task. (required)
     *
     * @param currentPage Page number (optional, default to 1)
     *
     * @param pageSize Number of items per page (optional, default to 10)
     *
     * @return TaskStepsListResponse
     */
    @Operation(
        operationId = "listAgentTaskSteps",
        summary = "List all steps for the specified task.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned list of agent's steps for the specified task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskStepsListResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskId", description = "ID of the task.", required = true),
            @Parameter(name = "currentPage", description = "Page number"),
            @Parameter(name = "pageSize", description = "Number of items per page")
        }
    )
    @Get("/ap/v1/agent/tasks/{task_id}/steps")
    @Produces({"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    TaskStepsListResponse listAgentTaskSteps(
        @NotNull
        @PathVariable("task_id")
        String taskId,
        @HardNullable
        @Min(1)
        @QueryValue(value = "current_page", defaultValue = "1")
        Integer currentPage,
        @HardNullable
        @Min(1)
        @QueryValue(value = "page_size", defaultValue = "10")
        Integer pageSize
    );

    /**
     * List all tasks that have been created for the agent.
     *
     * @param currentPage Page number (optional, default to 1)
     *
     * @param pageSize Number of items per page (optional, default to 10)
     *
     * @return TaskListResponse
     */
    @Operation(
        operationId = "listAgentTasks",
        summary = "List all tasks that have been created for the agent.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned list of agent's tasks.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskListResponse.class))
            }),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "currentPage", description = "Page number"),
            @Parameter(name = "pageSize", description = "Number of items per page")
        }
    )
    @Get("/ap/v1/agent/tasks")
    @Produces({"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    TaskListResponse listAgentTasks(
        @HardNullable
        @Min(1)
        @QueryValue(value = "current_page", defaultValue = "1")
        Integer currentPage,
        @HardNullable
        @Min(1)
        @QueryValue(value = "page_size", defaultValue = "10")
        Integer pageSize
    );

    /**
     * Upload an artifact for the specified task.
     *
     * @param taskId ID of the task (required)
     *
     * @param _file File to upload. (required)
     *
     * @param relativePath Relative path of the artifact in the agent&#39;s workspace. (optional)
     *
     * @return Artifact
     */
    @Operation(
        operationId = "uploadAgentTaskArtifacts",
        summary = "Upload an artifact for the specified task.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned the content of the artifact.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artifact.class))
            }),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "0", description = "Internal Server Error")
        },
        parameters = {
            @Parameter(name = "taskId", description = "ID of the task", required = true),
            @Parameter(name = "_file", description = "File to upload.", required = true),
            @Parameter(name = "relativePath", description = "Relative path of the artifact in the agent's workspace.")
        }
    )
    @Post("/ap/v1/agent/tasks/{task_id}/artifacts")
    @Produces({"application/json"})
    @Consumes({"multipart/form-data"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    Artifact uploadAgentTaskArtifacts(
        @NotNull
        @PathVariable("task_id")
        String taskId,
        @NotNull
        CompletedFileUpload _file,
        @HardNullable
        String relativePath
    );

}