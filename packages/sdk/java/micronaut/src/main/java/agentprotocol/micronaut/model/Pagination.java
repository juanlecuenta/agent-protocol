/*
 * Agent Protocol
 * Specification of the API protocol for communication with an agent.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package agentprotocol.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;
import com.fasterxml.jackson.annotation.*;
import io.micronaut.serde.annotation.Serdeable;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import io.micronaut.core.annotation.Introspected;
import agentprotocol.micronaut.invoker.annotation.HardNullable;
import jakarta.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Pagination
 */
@Serdeable
@JsonPropertyOrder({
    Pagination.JSON_PROPERTY_TOTAL_ITEMS,
    Pagination.JSON_PROPERTY_TOTAL_PAGES,
    Pagination.JSON_PROPERTY_CURRENT_PAGE,
    Pagination.JSON_PROPERTY_PAGE_SIZE
})
@Generated(value = "io.micronaut.openapi.generator.JavaMicronautServerCodegen")
@Introspected
public class Pagination {

    public static final String JSON_PROPERTY_TOTAL_ITEMS = "total_items";
    public static final String JSON_PROPERTY_TOTAL_PAGES = "total_pages";
    public static final String JSON_PROPERTY_CURRENT_PAGE = "current_page";
    public static final String JSON_PROPERTY_PAGE_SIZE = "page_size";

    /**
     * Total number of items.
     */
    @NotNull
    @Schema(name = "total_items", example = "42", description = "Total number of items.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_TOTAL_ITEMS)
    private Integer totalItems;

    /**
     * Total number of pages.
     */
    @NotNull
    @Schema(name = "total_pages", example = "97", description = "Total number of pages.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
    private Integer totalPages;

    /**
     * Current_page page number.
     */
    @NotNull
    @Schema(name = "current_page", example = "1", description = "Current_page page number.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CURRENT_PAGE)
    private Integer currentPage;

    /**
     * Number of items per page.
     */
    @NotNull
    @Schema(name = "page_size", example = "25", description = "Number of items per page.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
    private Integer pageSize;

    public Pagination(Integer totalItems, Integer totalPages, Integer currentPage, Integer pageSize) {
        this.totalItems = totalItems;
        this.totalPages = totalPages;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
    }

    /**
     * Total number of items.
     * @return the totalItems property value
     */
    public Integer getTotalItems() {
        return totalItems;
    }

    /**
     * Set the totalItems property value
     */
    public void setTotalItems(Integer totalItems) {
        this.totalItems = totalItems;
    }

    /**
     * Set totalItems in a chainable fashion.
     * @return The same instance of Pagination for chaining.
     */
    public Pagination totalItems(Integer totalItems) {
        this.totalItems = totalItems;
        return this;
    }

    /**
     * Total number of pages.
     * @return the totalPages property value
     */
    public Integer getTotalPages() {
        return totalPages;
    }

    /**
     * Set the totalPages property value
     */
    public void setTotalPages(Integer totalPages) {
        this.totalPages = totalPages;
    }

    /**
     * Set totalPages in a chainable fashion.
     * @return The same instance of Pagination for chaining.
     */
    public Pagination totalPages(Integer totalPages) {
        this.totalPages = totalPages;
        return this;
    }

    /**
     * Current_page page number.
     * @return the currentPage property value
     */
    public Integer getCurrentPage() {
        return currentPage;
    }

    /**
     * Set the currentPage property value
     */
    public void setCurrentPage(Integer currentPage) {
        this.currentPage = currentPage;
    }

    /**
     * Set currentPage in a chainable fashion.
     * @return The same instance of Pagination for chaining.
     */
    public Pagination currentPage(Integer currentPage) {
        this.currentPage = currentPage;
        return this;
    }

    /**
     * Number of items per page.
     * @return the pageSize property value
     */
    public Integer getPageSize() {
        return pageSize;
    }

    /**
     * Set the pageSize property value
     */
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * Set pageSize in a chainable fashion.
     * @return The same instance of Pagination for chaining.
     */
    public Pagination pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pagination pagination = (Pagination) o;
        return Objects.equals(this.totalItems, pagination.totalItems) &&
            Objects.equals(this.totalPages, pagination.totalPages) &&
            Objects.equals(this.currentPage, pagination.currentPage) &&
            Objects.equals(this.pageSize, pagination.pageSize);
    }

    @Override
    public int hashCode() {
        return Objects.hash(totalItems, totalPages, currentPage, pageSize);
    }

    @Override
    public String toString() {
        return "Pagination("
            + "totalItems: " + getTotalItems() + ", "
            + "totalPages: " + getTotalPages() + ", "
            + "currentPage: " + getCurrentPage() + ", "
            + "pageSize: " + getPageSize()
            + ")";
    }

}